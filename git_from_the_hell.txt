1. 깃 시작하기

1-1. 지옥에서 온 관리자, 깃
	# 깃으로 무엇을 할 수 있을까?
		(1) 버전 관리
		(2) 백업하기
		(3) 협업하기
	# 깃 프로그램의 종류
		깃허브 데스크톱, 토터스깃, 소스트리
	# 커맨드 라인 인터페이스

1-2. 깃 설치하기

1-3. 리눅스 명령 연습하기
	# 현재 디렉터리 살펴보기
		물결 표시(~): 홈 디렉터리
		pwd: 현재 위치의 경로 (print working directory)
		'ls'명령: 현재 디렉터리에 어떤 파일이나 디렉터리가 있는지 확인할 때
		'ls'명령의 '-l'옵션: 파일과 디렉터리의 상세 정보까지 표시
		'ls'명령의 '-a'옵션: 숨긴 파일과 디렉터리도 함께 표시
		'ls'명령의 '-r'옵션: 파일의 정렬 순서를 거꾸로 표시
		'ls'명령의 '-t'옵션: 파일 작성 시간 순으로 (내림차순) 표시

	# 터미널 창에서 디렉터리 이동하기
		'cd'명령: 디렉터리 사이를 이동
		특정 디렉터리로 이동: cd <전체 경로>
		상위 디렉터리로 이동: cd ..
		하위 디렉터리로 이동: cd <디렉터리 이름>
		홈 디렉터리로 이동: cd ~
		
	# 터미널 창에서 디렉터리 만들기 및 삭제하기
		현재 디렉터리 안에 하위 디렉터리 생성: mkdir <하위 디렉터리 이름>
		디렉터리 삭제: rm -r <하위 디렉터리 이름>

	# 빔에서 텍스트 문서 만들기
		'vim' 명령: 뒤에 입력한 파일 이름과 같은 파일이 없다면 그 이름으로 새로운 텍스트 문서를 만들고, 파일이 있다면 그 파일을 연다.
		'입력 모드'와 'ex 모드'가 있다. '입력 모드'에서는 텍스트 입력, 수정을 한다. 'ex 모드'에서는 저장, 종료 등을 한다.
		'ex 모드'에서 '입력 모드'로 이동하려면 '[I]' 또는 '[A]'를 눌러야 한다.
		'입력 모드'에서 'ex 모드'로 이동하려면 '[ESC]'를 눌러야 한다.
		
		빔 ex 모드 명령 모음
		:w 편집 중이던 문서를 저장한다.
		:q 편집기를 종료한다.
		:wq 편집 중이던 문서를 저장하고 종료한다. 파일 이름을 함께 입력하면 그 이름으로 저장한다.
		:q! 문서를 저장하지 않고 편집기를 종료한다. 확장자가 .swp인 임시 파일이 생긴다.

	# 텍스트 문서 내용 확인하기
		'cat' 명령 다음에 텍스트 파일 이름을 함께 입력하면 터미널 화면에 그 텍스트 파일의 내용을 보여준다.


2. 깃으로 버전 관리하기

2-1. 깃 저장소 만들기
	# 깃 초기화하기 - git init
		'git init' 명령: 디렉터리에 저장소를 만든다. 깃을 사용할 수 있도록 디렉터리를 초기화한다.
		'git init' 명령을입력하면 '.git'이라는 디렉터리가 생성된다. 이 디렉터리가 깃을 사용하면서 버전이 저장될 '저장소(repository)'이다.

2-2. 버전 만들기
	# 깃에서 버전이란
		깃에서 버전이란 문서를 수정하고 저장할 때마다 생기는 것이다.

	# 스테이지와 커밋 이해하기
		- 작업트리(working tree): 파일 수정, 저장 등의 작업을 하는 디렉터리
		- 스테이지(stage): 버전으로 만들 파일이 대기하는 곳
		- 저장소(repositort): 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 곳
			스테이지의 내용은 .git/index 파일에서 저장되고, 저장소의 내용은 .git/HEAD 파일에 저장된다.

		[깃이 버전을 만드는 순서]
		파일 문서를 수정하고 저장하면 그 파일은 작업 트리에 있게 된다.
		그리고 수정한 파일을 버전으로 만들고 싶을 때 스테이지에 넣는다.
		파일 수정을 끝내고 스테이지에 다 넣었다면 버전을 만들기 위해 깃에게 '커밋(commit)' 명령을 내린다.

	# 작업 트리에서 빔으로 문서 수정하기
		- git status 깃의 상태를 나타내는 메시지
			(1) On branch master: 현재 master 브랜치에 있습니다.
			(2) No commits yet: 아직 커밋한 파일이 없습니다.
			(3) nothing to commit: 현재 커밋할 파일이 없습니다.
		- 아직 한번도 버전 관리하지 않은 파일을 untracked files라고 부른다.

	# 수정한 파일을 스테이징하기 - git add
		깃에서 스테이징할 때 사용하는 명령은 git add이다.
		스테이징 내용을 .git/index 파일에 저장하기 때문에 스테이지에 올리는 것을 '인덱스(index)에 등록한다'라고도 한다.
		스테이징을 하면 untracked files이라는 문구가 changes to committed:로 바뀐다.
		그리고 파일 앞에 'new file:'이라는 수식어가 추가로 나타난다. 새 파일을 (앞으로) 커밋할 것이다는 뜻이다.

	# 스테이지에 올라온 파일 커밋하기 - git commit
		깃에서는 버전을 만드는 것을 간단히 '커밋(commit)한다'고도 말한다.
		깃에서 파일을 커밋하는 명령은 git commit이다.
		커밋한 후 git status로 결과 메시지를 보면 버전으로 만들 파일이 없고(nothing to commit) 작업 트리도 수정사항 없이 깨끗하다(working tree clean)고 나타난다.

	# 스테이징과 커밋 한꺼번에 처리하기 - git commit -am
		commit 명령에 -am 옵션을 사용하면 스테이지에 올리고 커밋하는 과정을 한꺼번에 처리할 수 있다.
		단, 이 방법은 한 번이라도 커밋한 적이 있는 파일을 다시 커밋할 때만 사용할 수 있다.

2-3. 커밋 내용 확인하기
	# 커밋 기록 자세히 살펴보기 - git log
		git log 명령을 입력하면 지금까지 만든 버전이 화면에 나타나고, 각 버전마다 설명도 함께 나타난다.
		commit이라는 항목 옆에 영문과 숫자로 된 긴 문자열이 나타나는데 이것을 커밋 해시(commit hash), 또는 깃 해시(git hash)라고 한다.
		커밋 해시 옆에 있는(HEAD->master)는 이 버전이 가장 최신이라는 표시이다.
		Author항목에는 버전을 누가 만들었는지, Date에는 버전이 언제 만들어졌는지 나타난다. 그 아래에는 작성자가 기록한 커밋 메시지가 나온다.
	
	# 변경 사항 확인하기 - git diff
		작업 트리에 있는 파일과 스테이지에 있는 파일을 비교하거나, 스테이지에 있는 파일과 저장소에 있는 최신 커밋을 비교할 수 있다.
		수정한 내용으로 다시 버전을 만들려면스테이지에 올린 후 커밋하고, 수정한 내용을 버리려면 git checkout 명령을 사용해 수정 내용을 취소한다.

2-4. 버전 만드는 단계마다 파일 상태 알아보기
	# tracked 파일과 untracked 파일
		git status 명령을 사용하면 화면에 파일 상태와 관련된 여러 메시지가 나타난다.
		작업 트리에 있는 파일은 크게 tracked 상태와 untracked 상태로 나뉜다.
		깃은 한 번이라도 커밋을 한 파일의 수정 여부를 계속 추적한다.
		
		작업트리에서 파일을 수정하고 git status를 입력하면 다음과 같은 메시지가 표시된다.
		한번 커밋했던 파일은 'Changes not staged for commit:'이라고 되어 있다.
		커밋한 적 없는 파일은 'untracked files'이라고 되어 있다.
		
		파일을 스테이지에 올리고 git status를 입력하면 다음과 같은 메시지가 표시된다.
		마지막 버전 이후 수정된 파일은 modified:로 표시된다.
		한 번도 버전 관리하지 않았던 파일은 new file:로 표시된다.
		
		파일을 커밋하고 git log --stat을 입력하면 커밋에 관련된 파일까지 함께 살펴볼 수 있다.
	
	# unmodified, modified, staged 상태
		tracked 상태인 파일은 깃 명령으로 파일 상태를 확인하면 현재 작업 트리에 있는지, 스테이지에 있는지 등 더 구체적인 상태를 알려준다.
		'working tree clean': 작업 트리에 아무 변경 사항도 없다. 현재 작업트리에 있는 모든 파일의 상태는 unmodified, 즉 수정되지 않은 상태이다.
		'Changes not stage for commit': 파일이 수정되었고 아직 스테이지에 올라가지 않았다. 파일이 수정만 된 modified 상태이다.
		'Changes to be committed:': 커밋할 변경사항이 있다. 파일이 커밋 직전 단계, 즉 staged 상태이다.
	
	# 방금 커밋한 메시지 수정하기
		git commit --amend
		* 가장 최근의 커밋 메시지를 수정하는 코드이다.

2-5. 작업 되돌리기
	# 작업 트리에서 수정한 파일 되돌리기 - git checkout
		checkout 명령을 사용하면 작업 트리에서 수정한 내용을 쉽게 취소할 수 있다.
		git checkout --hello.txt
		* hello.txt 작업 트리의 변경 사항을 취소하는 코드이다.
	
	# 스테이징 되돌리기 - git reset HEAD 파일 이름
		git reset HEAD 명령으로 스테이지에서 내릴 수 있다.
		git reset HEAD hello2.txt
		* 스테이지에서 hello2.txt를 내리는 코드이다.
		* HEAD 다음에 파일 이름을 지정하지 않으면 스테이지에 있는 모든 파일을 되돌린다.
	
	# 최신 커밋 되돌리기 - git reset HEAD^
		최신 커밋을 되돌리려면 git reset 명령을 내린 다음에 HEAD^를 붙인다.
		HEAD^는 현재 HEAD가 가리키는 브랜치의 최신 커밋을 가리킨다.
		최근 3개의 커밋을 취소하려면 $ git reset HEAD~3 처럼 사용한다.
		
	# git reset 명령의 옵션 살펴보기
		--soft HEAD^ 최근 커밋을 하기 전 상태로 작업 트리를 되돌린다.
		--mixed HEAD^ 최근 커밋과 스테이징을 하기 전 상태로 작업 트리를 되돌린다. 옵션 없이 git reset 명령을 사용할 경우 이 옵션을 기본으로 작동한다.
		--hard HEAD^ 최근 커밋과 스테이징, 파일 수정을 하기 전 상태로 작업 트리를 되돌린다. 이 옵션으로 되돌린 내용은 복구할 수 없다.
	
	# 특정 커밋으로 되돌리기 - git reset 커밋 해시
		특정 커밋으로 되돌릴 때는 git reset 명령 다음에 커밋 해시를 사용한다.
	
	# 커밋 삭제하지 않고 되돌리기 - git revert
		나중에 사용할 것을 대비해서 커밋을 되돌리더라도 취소한 커밋을 남여두어야 할 때 git revert 명령을 사용한다.
		revert 명령의 경우 rever 명령 뒤에 취소하려고 하는 버전의 커밋 해시를 지정한다.
		해당 버전을 지우는 대신 변경했던 이력을 취소한 새 커밋을 만드는 것이다.

3. 깃과 브랜치

3-1. 브랜치란?
	버전 관리 시스템에서 브랜치(Branch)는 나무가 가지에서 새 줄기를 뻗듯이 여러 갈래로 퍼지는 데이터 흐름을 가리키는 말로 사용한다.
	# 브랜치가 필요한 이유
	
	# 브랜치 기능 살펴보기
		깃으로 버전 관리를 시작하면 기본적으로 master라는 브랜치가 만들어진다.
		master 브랜치에서 뻗어 나오는 새 브랜치를 만드는 것을 '분기(branch)한다'고 한다.
		분기했던 브랜치를 master 브랜치에 합하는 것을 '병합(merge)한다'고 한다.

3-2. 브랜치 만들기
	# 새 브랜치 만들기
		깃에서 브랜치를 만들거나 확인하는 명령은 git branch이다.
		git branch apple
		* apple 브랜치를 만드는 코드이다.
		git branch
		* 저장소 안에 있는 모든 브랜치를 확인하는 코드이다.
	
	# 브랜치 사이 이동하기 - git checkout
		다른 브랜치로 이동하려면 git checkout 명령 다음에 브랜치 이름을 사용한다.
		apple 브랜치로 이동하는 것을 'apple 브랜치로 체크아웃한다'고 말한다.
		git checkout apple
		* apple 브랜치로 체크아웃하는 코드이다.
		apple 브랜치로 체크아웃하면 최신 커밋 해시에서 HEAD가 apple을 가리킨다.
		apple 브랜치가 master 브랜치에서 분기된 이후에 master 브랜치에 추가된 커밋은 apple 브랜치에 영향을 미치지 않는다.

3-3. 브랜치 정보 확인하기
	# 새 브랜치에서 커밋하기
		브랜치를 병합하려면 git merge 명령 뒤에 가져올 브랜치 이름을 적는다.
		git merge o2
		*o2 브랜치를 가져와 병합하는 명령이다.
		git log --oneline --branches --graph
		--branches 옵션을 사용하면 각 브랜치의 커밋을 함께 볼 수 있다.
		--oneline 옵션은 한 줄에 한 커밋씩 나타내 주기 때문에 커밋을 간략히 확인할 때 편리하다.
		--graph 옵션은 브랜치와 커밋의 관계를 좀 더 보기 쉽게 그래프 형태로 표시한다.
		
		git merge o2 --no-edit
		*편집기 창을 열지 않고 깃에서 지정하는 커밋 메시지를 그대로 사용하겠다는 명령이다.
		git merge o2 --edit
		*브랜치를 병합할 때 편집기 창이 나타나지 않도록 설정한 경우, 커밋 메시지를 추가하거나 수정하고 싶다면 병합 명령에 --edit 옵션을 사용한다.
	
	# 브랜치 사이의 차이점 알아보기
		브랜치 이름 사이에 마침표 두 개(..)를 넣는 명령으로 차이점을 확인할 수 있다.
		git log master..apple
		* master 브랜치와 apple 브랜치 사이의 차이점을 확인하는 코드이다. master 브랜치에는 없고 apple 브랜치에만 있는 커밋을 표시한다

3-4. 브랜치 병합하기
	만들어진 각 브랜치에서 작업을 하다가 브랜치 작업을 마무리하고 기존 브랜치와 합하는 것을 '브랜치 병합(merge)'이라 한다.
	# 서로 다른 파일 병합하기
		Merge made by the 'recursive' strategy
		o2 브랜치의 'o2 work 2' 커밋이 master 브랜치에 병합되면서 'Merge branch o2'라는 커밋이 새로 생긴다.
		
		* 빨리 감기 병합(fast-forward merge)
			master 브랜치에서 브랜치를 분기한 후에 master 브랜치에 아무 변화가 없는 상태에서 분기한 브랜치를 병합하는 경우
			분기한 브랜치에서 만든 최신 커밋을 master 브랜치가 가리키게 한다.
			git merge 명령의 결과가 단순히 포인터를 움직인 것이기 때문에 따로 커밋 메시지 창은 열리지 않는다.
	
	# 같은 문서의 다른 위치를 수정했을 때 병합하기
		Auto-merging work.txt
		Merge made by the 'recursive' strategy
		master 브랜치으 ㅣ수정 내용과 o2 브랜치의 수정 내용이 자연스럽게 하나의 파일에 합쳐진다.
	
	# 같은 문서의 같은 위치를 수정했을 때 병합하기
		Auto-merging work.txt
		CONFLICT (content): Merge conflict in work.txt
		Automatic merge failed; fix conflicts and then commit the result.
		충돌이 생긴 문서는 자동으로 병합될 수 없으므로 사용자가 직접 충돌 부분을 해결한 후 커밋해야 한다.
		만일 여러 개의 파일을 병합했다면 충돌이 발생한 파일 외에 다른 파일들은 자동으로 master 브랜치에 병합된다.
	
	# 병합이 끝난 브랜치 삭제하기
		브랜치를 삭제할 때는 git branch 명령에 -d 옵션을 사용한다.
		git branch -d o2
		* o2 브랜치를 삭제하는 코드이다.
		master 브랜치에 병합하지 않은 브랜치를 삭제하려면 -d 대신 -D를 사용해서 강제로 브랜치를 삭제할 수 있다.

3-5. 브랜치 관리하기
	# 브랜치에서 checkout과 reset의 작동 원리
		HEAD는 현재 작업 트리(워킹 디렉터리)가 어떤 버전을 기반으로 작업 중인지를 가리키는 포인터이다.
		브랜치는 기본적으로 브랜치에 담긴 커밋 중에서 가장 최근의 커밋을 가리킨다.
		git checkout 명령은 HEAD가 가리키는 것을 제어할 수 있다.
		git checkout sub 명령을 실행하면 HEAD가 sub 브랜치를 가리키게 된다.
		브랜치가 여러 개일 때는 현재 브랜치가 아닌 다른 브랜치에 있는 커밋을 골라서 최신 커밋으로 지정할 수 있다.
		git reset 명령을 사용하면 HEAD가 가리키고 있는 브랜치의 최신 커밋을 원하는 커밋으로 지정할 수 있다.
	
	# 수정 중인 파일 감추기 및 되돌리기 - git stash
		git stash 명령을 사용하려면 파일이 tracked 상태여야 한다.
		커밋하지 않은 수정 내용을 어딘가에 보관하려면 git stash 명령을 사용한다.
		git stash save 또는 간단히 git stash라고만 해도 된다.
		git stash list 명령으로 감춘 파일들을 목록에서 확인할 수 있다.
		가장 먼저 감춘 것은 stash@{0}에 들어 있다.
		앞으로 다른 파일이 추가되면 기존 파일은 stash@{1}로 옮겨지고 새로 추가된 파일은 stash@{0}에 담긴다.
		가장 최근에 감춘 것을 위에 쌓기 때문에 stash 스택(stack)이라고도 표현한다.
		
		git stash 명령 뒤에 pop을 추가하면 stash 목록에서 가장 최근 항목을 되돌린다.
		git stash apply 명령은 stash 목록에서 가장 최근 항목을 되돌리지만 저장했던 내용은 그대로 남겨둔다.
		git stash drop 명령은 stash 목록에서 가장 최근 항목을 삭제한다.

4. 깃허브로 백업하기


5. 깃허브로 협업하기


6. 깃허브에서 개발자와 소통하기

